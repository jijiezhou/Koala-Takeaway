{"ast":null,"code":"export default {\n  name: \"Admin\",\n  data() {\n    return {\n      tableData: [],\n      // all data\n      pageNum: 1,\n      // current page\n      pageSize: 10,\n      // number of items each page\n      total: 0,\n      username: null,\n      fromVisible: false,\n      form: {},\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      rules: {\n        username: [{\n          required: true,\n          message: 'please enter username',\n          trigger: 'blur'\n        }]\n      },\n      ids: []\n    };\n  },\n  created() {\n    this.load(1);\n  },\n  methods: {\n    //Add Admin\n    handleAdd() {\n      this.form = {}; // clear form data\n      this.fromVisible = true; // open dialog\n    },\n\n    //Edit Admin\n    handleEdit(row) {\n      this.form = JSON.parse(JSON.stringify(row)); // deep copy, set form initial value\n      this.fromVisible = true; // open dialog\n    },\n\n    //The logic triggered by the save button will trigger new or updated\n    save() {\n      this.$refs.formRef.validate(valid => {\n        if (valid) {\n          this.$request({\n            url: this.form.id ? '/admin/update' : '/admin/add',\n            method: this.form.id ? 'PUT' : 'POST',\n            data: this.form\n          }).then(res => {\n            if (res.code === '200') {\n              // save success\n              this.$message.success('save success');\n              this.load(1);\n              this.fromVisible = false;\n            } else {\n              this.$message.error(res.msg); // log error msg\n            }\n          });\n        }\n      });\n    },\n\n    //deleteById\n    del(id) {\n      this.$confirm('Are you sure to deleteï¼Ÿ', 'Confirm delete', {\n        type: \"warning\"\n      }).then(response => {\n        this.$request.delete('/admin/delete/' + id).then(res => {\n          //delete success\n          if (res.code === '200') {\n            this.$message.success('delete success');\n            this.load(1);\n          } else {\n            this.$message.error(res.msg); // log error msg\n          }\n        });\n      }).catch(() => {});\n    },\n    //All row data currently selected\n    handleSelectionChange(rows) {\n      this.ids = rows.map(v => v.id);\n    },\n    //delete by batch\n    delBatch() {\n      if (!this.ids.length) {\n        this.$message.warning('please select data');\n        return;\n      }\n      this.$confirm('Are you sure to delete by batch?', 'Confirm delete', {\n        type: \"warning\"\n      }).then(response => {\n        this.$request.delete('/admin/delete/batch', {\n          data: this.ids\n        }).then(res => {\n          //delete success\n          if (res.code === '200') {\n            this.$message.success('delete success');\n            this.load(1);\n          } else {\n            this.$message.error(res.msg); // log error info\n          }\n        });\n      }).catch(() => {});\n    },\n    //pagination\n    load(pageNum) {\n      if (pageNum) this.pageNum = pageNum;\n      this.$request.get('/admin/selectPage', {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          username: this.username\n        }\n      }).then(res => {\n        this.tableData = res.data?.list;\n        this.total = res.data?.total;\n      });\n    },\n    reset() {\n      this.username = null;\n      this.load(1);\n    },\n    handleCurrentChange(pageNum) {\n      this.load(pageNum);\n    },\n    handleAvatarSuccess(response, file, fileList) {\n      // Change the avatar attribute to the link of the uploaded image\n      this.form.avatar = response.data;\n    }\n  }\n};","map":{"version":3,"names":["name","data","tableData","pageNum","pageSize","total","username","fromVisible","form","user","JSON","parse","localStorage","getItem","rules","required","message","trigger","ids","created","load","methods","handleAdd","handleEdit","row","stringify","save","$refs","formRef","validate","valid","$request","url","id","method","then","res","code","$message","success","error","msg","del","$confirm","type","response","delete","catch","handleSelectionChange","rows","map","v","delBatch","length","warning","get","params","list","reset","handleCurrentChange","handleAvatarSuccess","file","fileList","avatar"],"sources":["src/views/manager/Business.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"search\">\n      <el-input placeholder=\"please enter username\" style=\"width: 200px\" v-model=\"username\"></el-input>\n      <el-button type=\"info\" plain style=\"margin-left: 10px\" @click=\"load(1)\">Query</el-button>\n      <el-button type=\"warning\" plain style=\"margin-left: 10px\" @click=\"reset\">Reset</el-button>\n    </div>\n\n    <div class=\"operation\">\n      <el-button type=\"primary\" plain @click=\"handleAdd\">Add</el-button>\n      <el-button type=\"danger\" plain @click=\"delBatch\">DeleteBatch</el-button>\n    </div>\n\n    <div class=\"table\">\n      <el-table :data=\"tableData\" strip @selection-change=\"handleSelectionChange\">\n        <el-table-column type=\"selection\" width=\"55\" align=\"center\"></el-table-column>\n        <el-table-column prop=\"id\" label=\"id\" width=\"70\" align=\"center\" sortable></el-table-column>\n        <el-table-column prop=\"username\" label=\"username\"></el-table-column>\n        <el-table-column prop=\"name\" label=\"name\"></el-table-column>\n        <el-table-column label=\"avatar\">\n          <template v-slot=\"scope\">\n            <div style=\"display: flex; align-items: center\">\n              <el-image style=\"width: 40px; height: 40px; border-radius: 50%\" v-if=\"scope.row.avatar\"\n                        :src=\"scope.row.avatar\" :preview-src-list=\"[scope.row.avatar]\"></el-image>\n            </div>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"role\" label=\"role\"></el-table-column>\n        <el-table-column prop=\"phone\" label=\"phone\"></el-table-column>\n        <el-table-column prop=\"info\" label=\"info\"></el-table-column>\n        <el-table-column prop=\"address\" label=\"address\"></el-table-column>\n        <el-table-column prop=\"license\" label=\"license\">\n          <template v-slot=\"scope\">\n            <div style=\"display: flex; align-items: center\">\n              <el-image style=\"width: 40px; height: 40px; border-radius: 50%\" v-if=\"scope.row.avatar\"\n                        :src=\"scope.row.avatar\" :preview-src-list=\"[scope.row.avatar]\"></el-image>\n            </div>\n          </template>\n        </el-table-column>\n\n        <el-table-column label=\"operation\" align=\"center\" width=\"180\">\n          <template v-slot=\"scope\">\n            <el-button size=\"mini\" type=\"primary\" plain @click=\"handleEdit(scope.row)\">Edit</el-button>\n            <el-button size=\"mini\" type=\"danger\" plain @click=\"del(scope.row.id)\">Delete</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n\n      <div class=\"pagination\">\n        <el-pagination\n            background\n            @current-change=\"handleCurrentChange\"\n            :current-page=\"pageNum\"\n            :page-sizes=\"[5, 10, 20]\"\n            :page-size=\"pageSize\"\n            layout=\"total, prev, pager, next\"\n            :total=\"total\">\n        </el-pagination>\n      </div>\n    </div>\n\n    <el-dialog title=\"Admin Form\" :visible.sync=\"fromVisible\" width=\"40%\" :close-on-click-modal=\"false\" destroy-on-close>\n      <el-form :model=\"form\" label-width=\"100px\" style=\"padding-right: 50px\" :rules=\"rules\" ref=\"formRef\">\n        <el-form-item label=\"username\" prop=\"username\">\n          <el-input v-model=\"form.username\" placeholder=\"username\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"name\" prop=\"name\">\n          <el-input v-model=\"form.name\" placeholder=\"name\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"phone\" prop=\"phone\">\n          <el-input v-model=\"form.phone\" placeholder=\"phone\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"email\" prop=\"email\">\n          <el-input v-model=\"form.email\" placeholder=\"email\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"avatar\">\n          <el-upload\n              class=\"avatar-uploader\"\n              :action=\"$baseUrl + '/files/upload'\"\n              :headers=\"{ token: user.token }\"\n              list-type=\"picture\"\n              :on-success=\"handleAvatarSuccess\"\n          >\n            <el-button type=\"primary\">Upload Avatar</el-button>\n          </el-upload>\n        </el-form-item>\n      </el-form>\n\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"fromVisible = false\">Cancel</el-button>\n        <el-button type=\"primary\" @click=\"save\">Confirm</el-button>\n      </div>\n    </el-dialog>\n\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Admin\",\n  data() {\n    return {\n      tableData: [],  // all data\n      pageNum: 1,   // current page\n      pageSize: 10,  // number of items each page\n      total: 0,\n      username: null,\n      fromVisible: false,\n      form: {},\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      rules: {\n        username: [\n          {required: true, message: 'please enter username', trigger: 'blur'},\n        ]\n      },\n      ids: []\n    }\n  },\n  created() {\n    this.load(1)\n  },\n  methods: {\n    //Add Admin\n    handleAdd() {\n      this.form = {}  // clear form data\n      this.fromVisible = true   // open dialog\n    },\n    //Edit Admin\n    handleEdit(row) {\n      this.form = JSON.parse(JSON.stringify(row))  // deep copy, set form initial value\n      this.fromVisible = true   // open dialog\n    },\n    //The logic triggered by the save button will trigger new or updated\n    save() {\n      this.$refs.formRef.validate((valid) => {\n        if (valid) {\n          this.$request({\n            url: this.form.id ? '/admin/update' : '/admin/add',\n            method: this.form.id ? 'PUT' : 'POST',\n            data: this.form\n          }).then(res => {\n            if (res.code === '200') {  // save success\n              this.$message.success('save success')\n              this.load(1)\n              this.fromVisible = false\n            } else {\n              this.$message.error(res.msg)  // log error msg\n            }\n          })\n        }\n      })\n    },\n    //deleteById\n    del(id) {\n      this.$confirm('Are you sure to deleteï¼Ÿ', 'Confirm delete', {type: \"warning\"}).then(response => {\n        this.$request.delete('/admin/delete/' + id).then(res => {\n          //delete success\n          if (res.code === '200') {\n            this.$message.success('delete success')\n            this.load(1)\n          } else {\n            this.$message.error(res.msg)  // log error msg\n          }\n        })\n      }).catch(() => {\n      })\n    },\n    //All row data currently selected\n    handleSelectionChange(rows) {\n      this.ids = rows.map(v => v.id)\n    },\n    //delete by batch\n    delBatch() {\n      if (!this.ids.length) {\n        this.$message.warning('please select data')\n        return\n      }\n      this.$confirm('Are you sure to delete by batch?', 'Confirm delete', {type: \"warning\"}).then(response => {\n        this.$request.delete('/admin/delete/batch', {data: this.ids}).then(res => {\n          //delete success\n          if (res.code === '200') {\n            this.$message.success('delete success')\n            this.load(1)\n          } else {\n            this.$message.error(res.msg)  // log error info\n          }\n        })\n      }).catch(() => {\n      })\n    },\n    //pagination\n    load(pageNum) {\n      if (pageNum) this.pageNum = pageNum\n      this.$request.get('/admin/selectPage', {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          username: this.username,\n        }\n      }).then(res => {\n        this.tableData = res.data?.list\n        this.total = res.data?.total\n      })\n    },\n    reset() {\n      this.username = null\n      this.load(1)\n    },\n    handleCurrentChange(pageNum) {\n      this.load(pageNum)\n    },\n    handleAvatarSuccess(response, file, fileList) {\n      // Change the avatar attribute to the link of the uploaded image\n      this.form.avatar = response.data\n    },\n  }\n}\n</script>\n\n<style scoped>\n\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}